datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?     @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  accounts        Account[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  role            Role        @default(USER)
  orders          Order[]
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  userId            String      @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?     @db.String
  access_token      String?     @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?     @db.String
  session_state     String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Order {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  userId          String          @db.ObjectId
  amount          Float
  currency        String
  status          String
  deliveryStatus  String?
  createDate      DateTime        @default(now())
  paymentIntentId String          @unique
  products        CartProduct[]
  declineReason   String?
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartProduct {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String      @db.ObjectId
  name          String
  description   String
  category      String
  brand         String
  quantity      Int
  price         Float
  order         Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Image {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  color     String
  colorCode String
  image     String
}

model Address {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  city        String
  country     String
  line1       String
  line2       String?
  postal_code String
  state       String
}

 
